/**
 * Sample Generation Interfaces
 * Defines the structure for sample request generation and configuration
 */

import { ORTBRequest } from './ortb';

export type AdType = 'display' | 'video' | 'native' | 'audio';
export type SampleComplexity = 'minimal' | 'standard' | 'comprehensive';

export interface SampleConfig {
  /** Type of ad request to generate */
  requestType: AdType;
  /** Whether to include optional fields in the sample */
  includeOptionalFields: boolean;
  /** Complexity level of the generated sample */
  complexity: SampleComplexity;
  /** Custom field values to override defaults */
  customFields?: Record<string, any>;
  /** Publisher information to include in the sample */
  publisherInfo?: PublisherInfo;
  /** Device information to include in the sample */
  deviceInfo?: DeviceInfo;
  /** User information to include in the sample */
  userInfo?: UserInfo;
  /** Geographic information to include */
  geoInfo?: GeoInfo;
  /** Number of impressions to include */
  impressionCount?: number;
  /** Whether to include private marketplace deals */
  includePMP?: boolean;
  /** Whether to include test mode flag */
  testMode?: boolean;
}

export interface PublisherInfo {
  /** Publisher name */
  name?: string;
  /** Publisher domain */
  domain?: string;
  /** Site or app name */
  siteName?: string;
  /** Content categories */
  categories?: string[];
  /** Whether this is a mobile app or website */
  isMobileApp: boolean;
  /** App bundle ID (for mobile apps) */
  bundleId?: string;
  /** App store URL (for mobile apps) */
  storeUrl?: string;
}

export interface DeviceInfo {
  /** Device type (mobile, tablet, desktop, etc.) */
  deviceType?: 'mobile' | 'tablet' | 'desktop' | 'tv' | 'other';
  /** Operating system */
  os?: 'iOS' | 'Android' | 'Windows' | 'macOS' | 'Linux' | 'other';
  /** Browser type */
  browser?: 'Chrome' | 'Safari' | 'Firefox' | 'Edge' | 'other';
  /** Screen dimensions */
  screenSize?: {
    width: number;
    height: number;
  };
  /** Whether device supports JavaScript */
  supportsJavaScript?: boolean;
}

export interface UserInfo {
  /** User age range */
  ageRange?: 'under18' | '18-24' | '25-34' | '35-44' | '45-54' | '55-64' | 'over65';
  /** User gender */
  gender?: 'M' | 'F' | 'O';
  /** User interests/keywords */
  interests?: string[];
  /** Whether user has opted out of tracking */
  optedOut?: boolean;
}

export interface GeoInfo {
  /** Country code (ISO 3166-1 alpha-2) */
  country?: string;
  /** State/region */
  region?: string;
  /** City */
  city?: string;
  /** Latitude/longitude (for testing purposes) */
  coordinates?: {
    lat: number;
    lon: number;
  };
}

export interface SampleTemplate {
  /** Unique template identifier */
  id: string;
  /** Human-readable template name */
  name: string;
  /** Template description */
  description: string;
  /** Type of ad request this template generates */
  requestType: AdType;
  /** Template configuration */
  config: SampleConfig;
  /** Partial ORTB request template */
  template: Partial<ORTBRequest>;
  /** List of required fields that must be present */
  requiredFields: string[];
  /** List of optional fields that can be included */
  optionalFields: string[];
  /** Template tags for categorization */
  tags: string[];
  /** Template version */
  version: string;
  /** When the template was created */
  createdAt: Date;
  /** When the template was last updated */
  updatedAt: Date;
}

export interface GeneratedSample {
  /** The generated ORTB request */
  request: ORTBRequest;
  /** Configuration used to generate this sample */
  config: SampleConfig;
  /** Template used (if any) */
  template?: SampleTemplate;
  /** Metadata about the generation process */
  metadata: SampleMetadata;
  /** Validation result for the generated sample */
  validationResult?: any; // Will be ValidationResult from validation.ts
}

export interface SampleMetadata {
  /** Unique identifier for this generated sample */
  sampleId: string;
  /** Timestamp when sample was generated */
  generatedAt: Date;
  /** Version of the sample generator used */
  generatorVersion: string;
  /** OpenRTB specification version targeted */
  specVersion: string;
  /** List of fields that were auto-generated */
  autoGeneratedFields: string[];
  /** List of fields that were customized */
  customizedFields: string[];
  /** Generation statistics */
  stats: GenerationStats;
}

export interface GenerationStats {
  /** Time taken to generate the sample (in milliseconds) */
  generationTime: number;
  /** Number of fields generated */
  fieldsGenerated: number;
  /** Number of required fields included */
  requiredFieldsIncluded: number;
  /** Number of optional fields included */
  optionalFieldsIncluded: number;
  /** Size of generated JSON (in bytes) */
  jsonSize: number;
}

export interface BatchSampleConfig {
  /** Number of samples to generate */
  count: number;
  /** Base configuration for all samples */
  baseConfig: SampleConfig;
  /** Whether to vary configurations across samples */
  varyConfigurations: boolean;
  /** Variation settings */
  variations?: SampleVariations;
}

export interface SampleVariations {
  /** Vary request types */
  varyRequestTypes?: boolean;
  /** Vary publisher information */
  varyPublishers?: boolean;
  /** Vary device information */
  varyDevices?: boolean;
  /** Vary user information */
  varyUsers?: boolean;
  /** Vary geographic information */
  varyGeo?: boolean;
  /** Custom variation rules */
  customVariations?: Record<string, any[]>;
}

export interface BatchSampleResult {
  /** Array of generated samples */
  samples: GeneratedSample[];
  /** Batch configuration used */
  config: BatchSampleConfig;
  /** Batch metadata */
  metadata: BatchSampleMetadata;
  /** Summary statistics for the batch */
  summary: BatchSampleSummary;
}

export interface BatchSampleMetadata {
  /** Unique identifier for this batch */
  batchId: string;
  /** Timestamp when batch generation started */
  startedAt: Date;
  /** Timestamp when batch generation completed */
  completedAt: Date;
  /** Total time taken for batch generation */
  totalTime: number;
  /** Version of the batch generator used */
  generatorVersion: string;
}

export interface BatchSampleSummary {
  /** Total number of samples requested */
  totalRequested: number;
  /** Number of samples successfully generated */
  successfullyGenerated: number;
  /** Number of samples that failed generation */
  failedGeneration: number;
  /** Average generation time per sample */
  averageGenerationTime: number;
  /** Distribution of request types generated */
  requestTypeDistribution: Record<AdType, number>;
  /** Total size of all generated samples */
  totalSize: number;
}

export interface SampleExportConfig {
  /** Export format */
  format: 'json' | 'yaml' | 'xml' | 'csv';
  /** Whether to include metadata in export */
  includeMetadata: boolean;
  /** Whether to pretty-print the output */
  prettyPrint: boolean;
  /** Whether to anonymize sensitive data */
  anonymize: boolean;
  /** Custom export options */
  customOptions?: Record<string, any>;
}

export interface ExportedSample {
  /** Exported content */
  content: string;
  /** Export format used */
  format: string;
  /** Export metadata */
  metadata: ExportMetadata;
}

export interface ExportMetadata {
  /** Export timestamp */
  exportedAt: Date;
  /** Original sample ID */
  sampleId: string;
  /** Export configuration used */
  config: SampleExportConfig;
  /** Size of exported content */
  size: number;
  /** Content type/MIME type */
  contentType: string;
}